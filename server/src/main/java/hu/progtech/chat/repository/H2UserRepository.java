package hu.progtech.chat.repository;

import hu.progtech.chat.model.User;
import hu.progtech.chat.util.DatabaseManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class H2UserRepository implements UserRepository {
    private static final Logger LOGGER = LogManager.getLogger(H2UserRepository.class);
    private static final String CREATE_SQL_TABLE =
            """
            CREATE TABLE IF NOT EXISTS users (
                user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                username VARCHAR(255) UNIQUE NOT NULL,
                password VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
            );
            """;
    private static final String UNIQUE_VIOLATION_SQL_STATE = "23505";

    private final DatabaseManager databaseManager;

    public H2UserRepository(DatabaseManager databaseManager) throws RepositoryException {
        this.databaseManager = databaseManager;
        initializeTable();
    }

    private void initializeTable() throws RepositoryException {
        try (Connection conn = databaseManager.getConnection();
                Statement stmt = conn.createStatement()) {
            LOGGER.info("Initializing users table.");
            stmt.execute(CREATE_SQL_TABLE);
            LOGGER.info("Users table initilization complete.");
        } catch (SQLException e) {
            LOGGER.error("Failed to initialize users table: " + e, e);
            throw new RepositoryException("Failed to initialize users table.", e);
        }
    }

    @Override
    public User save(final User user) throws RepositoryException {
        final String sql = "INSERT INTO users (username, password) VALUES (?, ?)";

        try (Connection conn = databaseManager.getConnection();
                PreparedStatement stmt =
                        conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, user.username());
            stmt.setString(2, user.passwordHash());

            LOGGER.info("Saving user: {}.", user.username());
            int affectedRows = stmt.executeUpdate();
            if (affectedRows == 0) {
                LOGGER.error(
                        "Creating user failed, no rows affected for username: {}.",
                        user.username());
                throw new RepositoryException("Creating user failed, no rows affected.");
            }

            try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    final long newId = generatedKeys.getLong(1);
                    final Timestamp ts = generatedKeys.getTimestamp("created_at");
                    final LocalDateTime newCreatedAt = (ts != null) ? ts.toLocalDateTime() : null;

                    if (newCreatedAt == null) {
                        LOGGER.warn(
                                "created_at was not returned by getGeneratedKeys() for user id {}.",
                                newId);
                    }

                    return new User(newId, user.username(), user.passwordHash(), newCreatedAt);
                } else {
                    LOGGER.error(
                            "Creating user failed, no ID obtained for username: {}",
                            user.username());
                    throw new RepositoryException("Creating user failed, no ID obtained.");
                }
            }
        } catch (SQLException e) {
            if (UNIQUE_VIOLATION_SQL_STATE.equals(e.getSQLState())) {
                throw new RepositoryException("Username already exists.", e);
            }
            LOGGER.error("Unexpected error when saving user {}.", user.username(), e);
            throw new RepositoryException("Error wsaving user " + user.username(), e);
        }
    }

    @Override
    public Optional<User> findById(final long id) throws RepositoryException {
        final String sql = "SELECT * FROM users WHERE user_id = ?";

        try (Connection conn = databaseManager.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setLong(1, id);

            LOGGER.info("Querying user by ID: {}.", id);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return Optional.of(mapRowToUser(rs));
                }
            }
        } catch (SQLException e) {
            LOGGER.error("Error finding user by ID {}: {}.", id, e.getMessage(), e);
            throw new RepositoryException("Error finding user by ID " + id, e);
        }

        return Optional.empty();
    }

    @Override
    public Optional<User> findByUsername(final String username) throws RepositoryException {
        final String sql = "SELECT * FROM users WHERE username = ?";

        try (Connection conn = databaseManager.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);

            LOGGER.info("Querying user by username: {}.", username);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return Optional.of(mapRowToUser(rs));
                }
            }
        } catch (SQLException e) {
            LOGGER.error("Error finding user by username {}: {}.", username, e.getMessage(), e);
            throw new RepositoryException("Error finding user by username " + username, e);
        }

        return Optional.empty();
    }

    @Override
    public List<User> findAll() {
        final String sql = "SELECT * FROM users";

        final List<User> users = new ArrayList<>();

        LOGGER.info("Querying all users.");
        try (Connection conn = databaseManager.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                users.add(mapRowToUser(rs));
            }
        } catch (SQLException e) {
            LOGGER.error("Error retrieving all users.", e);
            throw new RepositoryException("Error retrieving all users.", e);
        }

        return users;
    }

    private User mapRowToUser(ResultSet rs) throws SQLException {
        return new User(
                rs.getLong("user_id"),
                rs.getString("username"),
                rs.getString("password"),
                rs.getTimestamp("created_at").toLocalDateTime());
    }
}
