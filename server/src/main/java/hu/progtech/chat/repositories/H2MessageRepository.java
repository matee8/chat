package hu.progtech.chat.repositories;

import hu.progtech.chat.models.Message;
import hu.progtech.chat.repositories.core.DatabaseManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class H2MessageRepository implements MessageRepository {
    private static final Logger LOGGER = LogManager.getLogger(H2MessageRepository.class);
    private static final String CREATE_SQL_TABLE = """
        CREATE TABLE IF NOT EXISTS messages (
            message_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            sender_id INT NOT NULL,
            content TEXT NOT NULL,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
            FOREIGN KEY (sender_id) REFERENCES users(user_id) ON DELETE CASCADE
        );
    """;

    private final DatabaseManager databaseManager;

    public H2MessageRepository(final DatabaseManager databaseManager) throws RepositoryException {
        this.databaseManager = databaseManager;
        initializeTable();
    }

    private void initializeTable() throws RepositoryException {
        try (Connection conn = databaseManager.getConnection();
                Statement stmt = conn.createStatement()) {
            LOGGER.info("Initializing messages table.");
            stmt.execute(CREATE_SQL_TABLE);
            LOGGER.info("Messages table initialization complete.");
        } catch (SQLException e) {
            LOGGER.error("Failed to initialize messages table.", e);
            throw new RepositoryException("Failed to initialize messages table.", e);
        }
    }

    @Override
    public Message save(final Message message) {
        final String sql = "INSERT INTO messages (sender_id, content) VALUES (?, ?)";

        try (Connection conn = databaseManager.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setLong(1, message.senderId());
            stmt.setString(2, message.content());

            LOGGER.info("Saving message from User #{}: '{}'", message.senderId(), message.content());
            int affectedRows = stmt.executeUpdate();
            if (affectedRows == 0) {
                LOGGER.error("Creating message failed, no rows affected.");
                throw new RepositoryException("Creating message failed, no rows affected.");
            }


            try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    final long newId = generatedKeys.getLong(1);
                    final Timestamp ts = generatedKeys.getTimestamp("timestamp");
                    final LocalDateTime newTimestamp = (ts != null) ? ts.toLocalDateTime() : null;

                    if (newTimestamp == null) {
                        LOGGER.warn("Timestamp was not returned by getGeneratedKeys() for message id {}.", newId);
                    }

                    return new Message(newId, message.senderId(), message.content(), newTimestamp);
                } else {
                    LOGGER.error("Creating message failed, no ID obtained.");
                    throw new RepositoryException("Creating message failed, no ID obtained.");
                }
            }
        } catch (SQLException e) {
            LOGGER.error(
                    "Unexpected error when saving message from User #{}.", message.senderId(), e);
            throw new RepositoryException(
                    "Error saving messagea from User #" + message.senderId(), e);
        }
    }

    @Override
    public List<Message> getChatHistory() {
        final String sql = "SELECT * FROM messages;";

        final List<Message> messages = new ArrayList<>();

        LOGGER.info("Querying all saved messages for chat history.");
        try (Connection conn = databaseManager.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                messages.add(mapRowToMessage(rs));
            }
        } catch (SQLException e) {
            LOGGER.error("Error retrieving all messages.", e);
            throw new RepositoryException("Error retrieving all messages.", e);
        }

        return messages;
    }

    private Message mapRowToMessage(final ResultSet rs) throws SQLException {
        return new Message(
                rs.getLong("message_id"),
                rs.getLong("sender_id"),
                rs.getString("content"),
                rs.getTimestamp("timestamp").toLocalDateTime());
    }
}
