package hu.progtech.chat.repositories;

import hu.progtech.chat.models.Message;
import hu.progtech.chat.repositories.core.DatabaseManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class H2MessageRepository implements MessageRepository {
    private static final Logger logger = LogManager.getLogger(H2MessageRepository.class);
    private static final String CREATE =
            "CREATE TABLE IF NOT EXISTS messages ("
                    + "message_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                    + "sender_id INT NOT NULL,"
                    + "content TEXT NOT NULL,"
                    + "timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),"
                    + "FOREIGN KEY (sender_id) REFERENCES users(user_id) ON DELETE CASCADE"
                    + ");";

    private final DatabaseManager db;

    public H2MessageRepository() throws RepositoryException {
        db = DatabaseManager.getInstance();

        try (Connection conn = db.getConnection();
                Statement stmt = conn.createStatement()) {
            stmt.execute(CREATE);
        } catch (SQLException e) {
            throw new RepositoryException("Failed to initialize messages table.", e);
        }
    }

    @Override
    public Message save(Message message) {
        final String sql = "INSERT INTO messages (sender_id, content) VALUES (?, ?)";

        try (Connection conn = db.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setLong(1, message.getSenderId());
            stmt.setString(2, message.getContent());

            int affectedRows = stmt.executeUpdate();
            if (affectedRows == 0) {
                throw new RepositoryException("Creating message failed, no rows affected.");
            }

            logger.debug(
                    "Message saved: [User #"
                            + message.getSenderId()
                            + "]: "
                            + message.getContent());

            try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    message.setId(generatedKeys.getInt(1));
                    message.setTimestamp(generatedKeys.getTimestamp(4).toLocalDateTime());
                }
            }

            return message;
        } catch (SQLException e) {
            logger.error(
                    "Unexpected error when saving message from User #" + message.getSenderId(), e);
            throw new RepositoryException(
                    "Error saving messagea from User #" + message.getSenderId(), e);
        }
    }

    @Override
    public List<Message> getChatHistory() {
        final String sql = "SELECT * FROM messages;";

        List<Message> users = new ArrayList<>();

        try (Connection conn = db.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                users.add(mapRowToMessage(rs));
            }
        } catch (SQLException e) {
            logger.error("Error retrieving all messages.", e);
            throw new RepositoryException("Error retrieving all messages.", e);
        }

        return users;
    }

    private Message mapRowToMessage(ResultSet rs) throws SQLException {
        return new Message(
                rs.getLong("message_id"),
                rs.getLong("sender_id"),
                rs.getString("content"),
                rs.getTimestamp("timestamp").toLocalDateTime());
    }
}
