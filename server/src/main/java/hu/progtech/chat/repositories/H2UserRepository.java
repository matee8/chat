package hu.progtech.chat.repositories;

import hu.progtech.chat.models.User;
import hu.progtech.chat.repositories.core.DatabaseManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class H2UserRepository implements UserRepository {
    private static final Logger log = LogManager.getLogger(H2UserRepository.class);
    private static final String CREATE =
            "CREATE TABLE IF NOT EXISTS users ("
                    + "user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                    + "username VARCHAR(255) UNIQUE NOT NULL,"
                    + "password VARCHAR(255) NOT NULL,"
                    + "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP()"
                    + ");";

    private final DatabaseManager db;

    public H2UserRepository() throws RepositoryException {
        db = DatabaseManager.getInstance();

        try (Connection conn = db.getConnection();
                Statement stmt = conn.createStatement()) {
            stmt.execute(CREATE);
        } catch (SQLException e) {
            throw new RepositoryException("Failed to initialize user table.", e);
        }
    }

    @Override
    public User save(User user) throws RepositoryException {
        final String sql = "INSERT INTO USERS (username, password) VALUES (?, ?)";

        try (Connection conn = db.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getPasswordHash());

            int affectedRows = stmt.executeUpdate();
            if (affectedRows == 0) {
                logger.error("No rows affected when saving user.");
                throw new RepositoryException("Creating user failed, no rows affected.");
            }

            try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    user.setId(generatedKeys.getInt(1));
                    user.setCreatedAt(generatedKeys.getTimestamp(1).toLocalDateTime());
                }
            }

            logger.debug("User saved: {}", user.getUsername());

            return user;
        } catch (SQLException e) {
            logger.error("Unexpected error when saving user " + user.getUsername(), e);
            throw new RepositoryException("Error saving user " + user.getUsername(), e);
        }
    }

    @Override
    public Optional<User> findById(long id) throws RepositoryException {
        final String sql = "SELECT * FROM users WHERE id = ?";

        try (Connection conn = db.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setLong(1, id);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return Optional.of(mapRowToUser(rs));
                }
            }
        } catch (SQLException e) {
            logger.error("Can't find user by id " + id, e);
            throw new RepositoryException("Error finding user by id " + id, e);
        }
    }

    @Override
    public Optional<User> findByUsername(String username) {
        final String sql = "SELECT * FROM users WHERE username = ?";

        try (Connection conn = db.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return Optional.of(mapRowToUser(rs));
                }
            }
        } catch (SQLException e) {
            logger.error("Can't find user by username " + username, e);
            throw new RepositoryException("Error finding user by username " + username, e);
        }
    }

    @Override
    public List<User> findAll() {
        final String sql = "SELECT * FROM users";

        List<User> users = new ArrayList<>();

        try (Connection conn = db.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                users.add(mapRowToUser(rs));
            }
        } catch (SQLException e) {
            logger.error("Error retrieving all users.", e);
            throw new RepositoryException("Error retrieving all users.", e);
        }

        return users;
    }

    private User mapRowToUser(ResultSet rs) throws SQLException {
        return new User(
                rs.getLong("id"),
                rs.getString("username"),
                rs.getString("password"),
                rs.getTimestamp("created_at").toLocalDateTime());
    }
}
